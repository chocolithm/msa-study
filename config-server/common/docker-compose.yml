version: '2.1'
services:
  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "ostock_dev"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512MB

  configserver:
    image: ostock/configserver:0.0.1-SNAPSHOT
    ports:
      - "8071:8071"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    networks:
      backend:
        aliases:
          - "configserver"

  eurekaserver:
    image: ostock/eurekaserver:0.0.1-SNAPSHOT
    ports:
      - "8070:8070"
    environment:
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/"
      EUREKASERVER_PORT: "8070"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"

  gatewayserver:
    image: ostock/gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/"
      EUREKASERVER_PORT: "8070"
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"

  zookeeper:
    image: zookeeper:3.7.0
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
    deploy:
      resources:
        limits:
          memory: 512MB

  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
      - KAFKA_HEAP_OPTS=-Xmx512m -Xms512m
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
    deploy:
      resources:
        limits:
          memory: 1GB

  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"
    deploy:
      resources:
        limits:
          memory: 256MB

  licensingservice:
    image: ostock/licensing-service:0.0.1-SNAPSHOT
    ports:
      - "8180:8080"
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      EUREKASERVER_URI: "http://eurekaserver:8070"
      EUREKASERVER_PORT: "8070"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      kafkaserver:
        condition: service_started
      redisserver:
        condition: service_started
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512MB

  organizationservice:
    image: ostock/organization-service:0.0.1-SNAPSHOT
    ports:
      - "8081:8081"
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      EUREKASERVER_URI: "http://eurekaserver:8070"
      EUREKASERVER_PORT: "8070"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      kafkaserver:
        condition: service_started
      redisserver:
        condition: service_started
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512MB

  keycloak:
    image: alemairebe/keycloak:14.0.0
    restart: always
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: database
      DB_PORT: 5432
      DB_DATABASE: ostock_dev
      DB_USER: postgres
      DB_PASSWORD: postgres
      KEYCLOAK_VERSION: 6.0.1
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    volumes:
      - ./realm-export.json:/opt/alemairebe/keycloak/realm-export.json
    command:
      - "-b 0.0.0.0"
      - "-Dkeycloak.import=/opt/alemairebe/keycloak/realm-export.json"
      - "-Dkeycloak.profile.feature.scripts=enabled"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "keycloak"
    deploy:
      resources:
        limits:
          memory: 512MB

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
    deploy:
      resources:
        limits:
          memory: 1.5GB

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
    deploy:
      resources:
        limits:
          memory: 512MB

  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command:
      logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"
    deploy:
      resources:
        limits:
          memory: 512MB

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"
    deploy:
      resources:
        limits:
          memory: 512MB

volumes:
  esdata1:
    driver: local

networks:
  backend:
    driver: bridge